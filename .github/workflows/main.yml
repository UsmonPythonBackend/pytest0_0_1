name: Manual autotests
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Allure CLI
        run: npm i -g allure-commandline

      - name: Setup Java (for Allure)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install matplotlib

      - name: Run tests (pytest -> allure-results)
        run: python -m pytest -v -s tests/test_wishlist.py --alluredir=allure-results

      - name: Generate Allure report (static site)
        run: npx allure generate --clean allure-results --output allure-report

      - name: Zip Allure report
        run: |
          sudo apt-get update
          sudo apt-get install -y zip
          cd allure-report
          zip -r ../allure-report.zip .
          cd ..

      - name: Build summary image and caption
        run: |
          python - << 'PY'
          import json
          from pathlib import Path
          import matplotlib
          matplotlib.use("Agg")
          import matplotlib.pyplot as plt

          # —á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É allure
          summary_file = Path("allure-report/widgets/summary.json")
          if not summary_file.exists():
              stats = {"passed": 0, "failed": 0, "skipped": 0}
          else:
              data = json.loads(summary_file.read_text(encoding="utf-8"))
              s = data.get("statistic", {})
              stats = {
                  "passed": int(s.get("passed", 0)),
                  "failed": int(s.get("failed", 0)),
                  "skipped": int(s.get("skipped", 0)),
              }

          # –ø–æ–¥–ø–∏—Å—å –≤ —Å—Ç–æ–ª–±–∏–∫
          caption = (
              "Autotests finished\n"
              f"Passed: {stats['passed']}\n"
              f"Failed: {stats['failed']}\n"
              f"Skipped: {stats['skipped']}"
          )
          Path("caption.txt").write_text(caption, encoding="utf-8")

          # —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ —Å—Ç–∞—Ç—É—Å–∞ + —Ü–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ Allure
          labels, sizes, colors = [], [], []
          palette = {"passed": "#4CAF50", "failed": "#F44336", "skipped": "#BDBDBD"}
          for key in ["passed", "failed", "skipped"]:
              v = stats[key]
              if v > 0:
                  labels.append(key.capitalize())
                  sizes.append(v)
                  colors.append(palette[key])
          if not sizes:
              labels, sizes, colors = ["No tests"], [1], ["#BDBDBD"]

          # –∫–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞, –∫–∞–∫ –≤ Allure
          fig, ax = plt.subplots(figsize=(6,6), dpi=180)
          wedges, texts, autotexts = ax.pie(
              sizes,
              labels=labels,
              autopct='%1.0f%%',
              startangle=90,
              colors=colors,
              wedgeprops=dict(width=0.38, edgecolor='white'),
              textprops=dict(color="black", fontsize=11, weight='bold')
          )
          plt.setp(autotexts, size=10, weight="bold", color="white")
          ax.set_title("Allure Summary (Passed / Failed / Skipped)", fontsize=14, weight='bold')
          ax.axis("equal")
          plt.tight_layout()
          fig.savefig("allure-summary.png", bbox_inches="tight", facecolor="white")
          PY

      - name: Send summary image to Telegram
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          CAPTION=$(cat caption.txt)
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
            -F "chat_id=${TG_CHAT}" \
            -F "photo=@allure-summary.png" \
            -F "caption=${CAPTION}"
            - name: Send ZIP report to Telegram
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendDocument" \
            -F "chat_id=${TG_CHAT}" \
            -F "document=@allure-report.zip" \
            -F "caption=üìé Allure report (ZIP)"
